# Lane Detection

import cv2 as cv
import numpy as np


# function to apply canny edge detection on image
def canny(im):
    # convert image to grayscale
    gray = cv.cvtColor(im, cv.COLOR_RGB2GRAY)
    # apply gaussian blue to reduce noise and improve edge detection
    blur = cv.GaussianBlur(gray, (5, 5), 0)
    # perform canny edge detection
    canny = cv.Canny(blur, 50, 150)
    # return edge-detected image
    return canny


# function to draw detected lines on image
def display_lines(im, lines):
    # create blank image with same dimensions as image
    line_im = np.zeros_like(im)

    # Lists to store left and right lane line parameters (slope, intercept)
    left_fit = []
    right_fit = []

    # check if any lines are detected
    if lines is not None:
        # iterate over each line
        for line in lines:
            # each line is defined by two points (x1, y1) and (x2, y2)
            x1, y1, x2, y2 = line.reshape(4)

            # calculate slope and intercept of line
            if x2 - x1 == 0:  # avoid division by zero
                continue
            slope = (y2 - y1) / (x2 - x1)
            intercept = y1 - slope * x1

            # separate left and right lanes based on slope
            if slope < -0.1:  # negative slope = left lane
                left_fit.append((slope, intercept))
            elif slope > 0.1:  # positive slope = right lane
                right_fit.append((slope, intercept))

    # function to create coordinates from slope and intercept
    def coordinates(slope_intercept):
        slope, intercept = slope_intercept
        y1 = im.shape[0]  # y1 = height of image
        y2 = int(y1 * 0.6)  # y2 = 60% up the image
        if slope == 0:  # Avoid division by zero
            return None
        # calculate x1 and x2: x = (y - intercept ) / slope
        x1 = int((y1 - intercept) / slope)
        x2 = int((y2 - intercept) / slope)
        return np.array([x1, y1, x2, y2])

    # function to calculate and print angle of lane line
    def print_angle(slope, label):
        # calculate angle from slope
        angle = np.degrees(np.arctan(slope))
        print(f"{label} lane line angle: {angle:.2f} degrees.")

    # calculate average slope and intercept for left lane
    if left_fit:
        left_avg = np.average(left_fit, axis=0)
        left_line = coordinates(left_avg)
        # draw line on image
        if left_line is not None:
            cv.line(line_im, (left_line[0], left_line[1]), (left_line[2], left_line[3]), (0, 0, 255), 5)
            # print angle of left lane
            print_angle(left_avg[0], "left")

    # calculate average slope and intercept for left lane
    if right_fit:
        right_avg = np.average(right_fit, axis=0)
        right_line = coordinates(right_avg)
        # draw line on image
        if right_line is not None:
            cv.line(line_im, (right_line[0], right_line[1]), (right_line[2], right_line[3]), (0, 0, 255), 5)
            # print angle of right lane
            print_angle(right_avg[0], "right")

    # return image with lane lines drawn on it
    return line_im


# function to define and apply a region of interest (ROI) mask
def region_of_interest(im):
    # get height and width of image
    height = im.shape[0]
    width = im.shape[1]

    # define polygon that will represent ROI
    polygons = np.array([
        [(int(width * 0.05), height),  # bottom left corner
         (int(width * 0.95), height),  # bottom right corner
         (int(width * 0.5), int(height * 0.55))]  # top center point
    ], np.int32)  # ensure polygon coordinates are integers

    # create a mask
    mask = np.zeros_like(im)
    # fill mask with white inside polygon
    cv.fillPoly(mask, polygons, 255)
    # apply mask to image using bitwise AND operation
    masked_im = cv.bitwise_and(im, mask)

    # return masked image
    return masked_im


# function to process an image
def process_image(image_path):
    # Load the image of the road
    im = cv.imread(image_path)
    if im is None:
        print(f"Error: Unable to open image file '{image_path}'.")
        return

    lane_im = np.copy(im)

    # Apply edge detection and region masking
    canny_im = canny(lane_im)
    cropped_im = region_of_interest(canny_im)

    # Detect lines using Hough Transform
    lines = cv.HoughLinesP(cropped_im, 2, np.pi / 180, 100, np.array([]), minLineLength=30, maxLineGap=150)

    # Display lines and angles
    line_im = display_lines(lane_im, lines)

    # Combine original image with line image
    combine_im = cv.addWeighted(lane_im, 0.8, line_im, 1, 1)

    # Show result
    cv.imshow("Lanes with Angles", combine_im)
    cv.waitKey(0)
    cv.destroyAllWindows()


# Test on the uploaded image
process_image('road2.jpg')

